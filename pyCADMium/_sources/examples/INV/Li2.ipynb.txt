{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from CADMium import Pssolver, Psgrid, Partition, Inverter\n",
    "import CADMium\n",
    "\n",
    "from copy import copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----> Begin SCF calculation for *Isolated* Fragments\n",
      "\n",
      "                Total Energy (a.u.)                                Inversion                \n",
      "\n",
      "                __________________                ____________________________________     \n",
      "\n",
      "Iteration         A              B                  iters      optimality        res       \n",
      "\n",
      "___________________________________________________________________________________________ \n",
      "\n",
      "    1           -8.63010     -8.63010       1.000e+00 \n",
      "    2           -7.59689     -7.59689       1.538e-01 \n",
      "    3           -7.38753     -7.38753       5.774e-02 \n",
      "    4           -7.34922     -7.34922       2.769e-02 \n",
      "    5           -7.34315     -7.34315       1.305e-02 \n",
      "    6           -7.34281     -7.34281       6.081e-03 \n",
      "    7           -7.34335     -7.34335       2.619e-03 \n",
      "    8           -7.34343     -7.34343       1.427e-03 \n",
      "    9           -7.34358     -7.34358       6.655e-04 \n",
      "   10           -7.34365     -7.34365       3.113e-04 \n",
      "   11           -7.34368     -7.34368       1.462e-04 \n",
      "   12           -7.34369     -7.34369       6.884e-05 \n",
      "   13           -7.34369     -7.34369       3.256e-05 \n",
      "   14           -7.34369     -7.34369       1.547e-05 \n",
      "   15           -7.34369     -7.34369       7.381e-06 \n",
      "----> Begin SCF calculation for *Interacting* Fragments\n",
      "\n",
      "                Total Energy (a.u.)                                Inversion                \n",
      "\n",
      "                __________________                ____________________________________     \n",
      "\n",
      "Iteration         A              B                  iters      optimality        res       \n",
      "\n",
      "___________________________________________________________________________________________ \n",
      "\n",
      "    1            -7.32464        -7.32464            10       +4.650e-15      +1.000e+00\n",
      "    2            -7.32866        -7.32866            11       +5.560e-15      +4.569e-02\n",
      "    3            -7.34060        -7.34060             9       +6.817e-15      +2.899e-02\n",
      "    4            -7.34060        -7.34060            10       +6.045e-15      +2.343e-02\n",
      "    5            -7.33583        -7.33583             8       +5.524e-14      +9.256e-03\n",
      "    6            -7.33571        -7.33571             7       +4.544e-15      +1.038e-02\n",
      "    7            -7.33833        -7.33833             7       +3.567e-15      +1.726e-03\n",
      "    8            -7.33903        -7.33903             6       +5.195e-15      +4.218e-03\n",
      "    9            -7.33788        -7.33788             6       +1.915e-14      +1.499e-03\n",
      "   10            -7.33717        -7.33717             6       +4.731e-15      +1.894e-03\n",
      "   11            -7.33751        -7.33751             6       +4.848e-15      +7.625e-04\n",
      "   12            -7.33798        -7.33798             5       +6.510e-15      +6.076e-04\n",
      "   13            -7.33800        -7.33800             5       +4.045e-15      +5.146e-04\n",
      "   14            -7.33779        -7.33779             5       +6.872e-15      +1.337e-04\n",
      "   15            -7.33769        -7.33769             4       +3.152e-14      +2.090e-04\n",
      "   16            -7.33774        -7.33774             4       +4.111e-14      +4.090e-05\n",
      "   17            -7.33779        -7.33779             4       +4.975e-15      +7.323e-05\n",
      "   18            -7.33781        -7.33781             4       +7.882e-15      +2.652e-05\n",
      "   19            -7.33779        -7.33779             4       +7.553e-15      +2.497e-05\n",
      "   20            -7.33778        -7.33778             4       +5.466e-15      +1.356e-05\n",
      "   21            -7.33778        -7.33778             3       +4.740e-15      +8.645e-06\n",
      "Done with 5.122\n"
     ]
    }
   ],
   "source": [
    "# dis_eq      = np.linspace(1.0,5,30)\n",
    "# dis_st      = np.linspace(5.1,10,10)\n",
    "# dis_eq      = np.linspace(1.0,5,10)\n",
    "# dis_st      = np.linspace(5.1,10,3)\n",
    "# distances   = np.concatenate((dis_eq, dis_st))\n",
    "distances = [5.122] \n",
    "# distances = [2.0]\n",
    "energy  = []\n",
    "\n",
    "for d in distances:\n",
    "    a = d/2\n",
    "    Za, Zb =  3,3\n",
    "    pol = 2\n",
    "\n",
    "    #Set up grid\n",
    "    NP = 7\n",
    "    NM = [6,6]\n",
    "    L = np.arccosh(15/a)\n",
    "    loc = np.array(range(-4,5)) #Stencil outline\n",
    "    grid = Psgrid(NP, NM, a, L, loc)\n",
    "    grid.initialize()\n",
    "\n",
    "\n",
    "    #Fragment a electrons [alpha, beta]\n",
    "\n",
    "    #Fragment a electrons [alpha, beta]\n",
    "    Nmo_a = [[1,2]]; Nmo_A = [[2,1]] #Number of molecular orbitals to calculate\n",
    "    N_a   = [[1,2]]; N_A   = [[2,1]]\n",
    "    nu_a = 0.5\n",
    "\n",
    "    #Fragment b electrons\n",
    "    Nmo_b = [[1,2]]; Nmo_B = [[2,1]]\n",
    "    N_b   = [[1,2]]; N_B   = [[2,1]] \n",
    "    nu_b = 0.5\n",
    "\n",
    "    #Molecular elctron configuration\n",
    "    Nmo_m = [[3,3]]\n",
    "    N_m   = [[3,3]]\n",
    "\n",
    "\n",
    "\n",
    "    part = Partition(grid, Za, Zb, pol, [Nmo_a, Nmo_A], [N_a, N_A], nu_a, \n",
    "                                        [Nmo_b, Nmo_B], [N_b, N_B], nu_b, {    \"AB_SYM\"            : True,\n",
    "                                                                               \"interaction_type\"  : \"dft\", \n",
    "                                                                               \"kinetic_part_type\" : \"inversion\",\n",
    "                                                                               \"hxc_part_type\"     : \"exact\",\n",
    "#                                                                                \"k_family\"          : \"gga\", \n",
    "#                                                                                \"ke_func_id\"        : 500,\n",
    "                                                                                })\n",
    "\n",
    "    #Setup inverter object\n",
    "    mol_solver = Pssolver(grid, Nmo_m, N_m)\n",
    "    part.inverter = Inverter(grid, mol_solver, {  \"AB_SYM\"         : True, \n",
    "                                                  \"use_iterative\"  : False,\n",
    "                                                  \"invert_type\"    : \"orbitalinvert\",\n",
    "                                                  \"DISP\"           : False,  \n",
    "                                                })\n",
    "\n",
    "    part.optPartition.isolated = True\n",
    "    part.scf({\"disp\"  : True,\n",
    "              \"alpha\" : [0.6],\n",
    "              \"e_tol\" : 1e-5})\n",
    "    \n",
    "#     atom = copy(part.E.Ea)\n",
    "    \n",
    "#     part.KSa.solver[0,0].optSolver.iter_lin_solver = False\n",
    "#     part.KSa.solver[0,1].optSolver.iter_lin_solver = False\n",
    "    \n",
    "#     part.KSA.solver[0,0].optSolver.iter_lin_solver = False\n",
    "#     part.KSA.solver[0,1].optSolver.iter_lin_solver = False\n",
    "    \n",
    "#     part.KSb.solver[0,0].optSolver.iter_lin_solver = False\n",
    "#     part.KSb.solver[0,1].optSolver.iter_lin_solver = False\n",
    "    \n",
    "#     part.KSB.solver[0,0].optSolver.iter_lin_solver = False\n",
    "#     part.KSB.solver[0,1].optSolver.iter_lin_solver = False\n",
    "\n",
    "    part.optPartition.isolated   = False\n",
    "    part.scf({\"disp\"       : True,\n",
    "              \"alpha\"      : [0.6],\n",
    "              \"max_iter\"   : 50,\n",
    "              \"e_tol\"      : 1e-5,\n",
    "              \"iterative\"  : False,\n",
    "              \"continuing\" : True})\n",
    "\n",
    "    energy.append(part.E.E)\n",
    "    print(f\"Done with {d}\")\n",
    "    \n",
    "    \n",
    "# energy    = np.array(energy)\n",
    "# np.save('h2plus_distance.npy', distances)\n",
    "# np.save('h2plus_overlap.npy', energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Ea': -7.337782105762022,\n",
       " 'Eb': -7.337782105762022,\n",
       " 'Ef': -14.675564211524044,\n",
       " 'Tsf': 14.51597413441419,\n",
       " 'Eksf': array([[-3.74685652, -3.74685652]]),\n",
       " 'Enucf': -33.888205438333586,\n",
       " 'Exf': -3.041843099343745,\n",
       " 'Ecf': -0.30099395411366964,\n",
       " 'Ehf': 8.039504145852767,\n",
       " 'Vhxcf': 11.684638443813574,\n",
       " 'Ep': -1.806931800537365,\n",
       " 'Ep_pot': -3.6782187039973078,\n",
       " 'Ep_kin': 0.004774410724220246,\n",
       " 'Ep_hxc': 1.8665124927357226,\n",
       " 'Et': -16.48249601206141,\n",
       " 'Vnn': 1.757126122608356,\n",
       " 'E': -14.725369889453054,\n",
       " 'evals_a': array([-1.81050752, -1.81778993, -0.11855907, -1.81778993, -0.11855907,\n",
       "        -1.81050752]),\n",
       " 'evals_b': array([-1.81050752, -1.81778993, -0.11855907, -1.81778993, -0.11855907,\n",
       "        -1.81050752]),\n",
       " 'Ep_h': 1.8866167323214942,\n",
       " 'Ep_x': 0.0070897811354484475,\n",
       " 'Ep_c': -0.027194020721220125}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vars(part.E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6.63782316e+00, 6.63782316e+00],\n",
       "       [5.94235124e+00, 5.94235124e+00],\n",
       "       [4.77075119e+00, 4.77075119e+00],\n",
       "       ...,\n",
       "       [1.61342469e-08, 1.61342469e-08],\n",
       "       [1.65561742e-08, 1.65561742e-08],\n",
       "       [1.67729863e-08, 1.67729863e-08]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part.nf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fb214471be0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x,d1 = grid.axis_plot(part.nf[:,0])\n",
    "x,d2 = grid.axis_plot(part.nf[:,1])\n",
    "\n",
    "x,pot = grid.axis_plot(part.V.vp_pot[:,0])\n",
    "x,hxc = grid.axis_plot(part.V.vp_hxc[:,0])\n",
    "x,har = grid.axis_plot(part.V.vp_h[:,0])\n",
    "x, xc = grid.axis_plot(part.V.vp_x[:,0] + part.V.vp_x[:,1])\n",
    "x, vp = grid.axis_plot(part.V.vp[:,0])\n",
    "\n",
    "x, xca = grid.axis_plot(part.KSA.V.vx[:,0] + part.KSA.V.vc[:,0])\n",
    "x, xcb = grid.axis_plot(part.KSB.V.vx[:,0] + part.KSB.V.vc[:,0])\n",
    "\n",
    "# plt.plot(x, pot)\n",
    "# plt.plot(x, har)\n",
    "plt.plot(x, vp)\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fb2bc966760>]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "h_energy = part.E.Ea\n",
    "plt.scatter(distances, part.E.E - 2 * h_energy)\n",
    "plt.axhline(y=0, alpha=0.5, c=\"grey\", ls=\":\")\n",
    "# plt.ylim(-.2,.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-12.930264759301952"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part.E.E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
