{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from CADMium import Pssolver, Psgrid, Partition, Inverter\n",
    "import CADMium\n",
    "\n",
    "from copy import copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----> Begin SCF calculation for *Isolated* Fragments\n",
      "\n",
      "                Total Energy (a.u.)       \n",
      "\n",
      "                __________________        \n",
      "\n",
      "Iteration         A            B              res     \n",
      "\n",
      "_______________________________________________________\n",
      "\n",
      "    1           -0.49357     -0.49357       1.000e+00 \n",
      "    2           -0.48337     -0.48337       4.373e-02 \n",
      "    3           -0.48014     -0.48014       1.404e-02 \n",
      "    4           -0.47914     -0.47914       4.373e-03 \n",
      "    5           -0.47883     -0.47883       1.333e-03 \n",
      "    6           -0.47874     -0.47874       3.961e-04 \n",
      "    7           -0.47872     -0.47872       1.134e-04 \n",
      "    8           -0.47871     -0.47871       3.049e-05 \n",
      "    9           -0.47871     -0.47871       1.127e-05 \n",
      "   10           -0.47871     -0.47871       4.672e-06 \n",
      "   11           -0.47871     -0.47871       1.967e-06 \n",
      "   12           -0.47871     -0.47871       8.353e-07 \n",
      "----> Begin SCF calculation for *Interacting* Fragments\n",
      "\n",
      "                Total Energy (a.u.)       \n",
      "\n",
      "                __________________        \n",
      "\n",
      "Iteration         A            B              res     \n",
      "\n",
      "_______________________________________________________\n",
      "\n",
      "I am continuing what you did\n",
      "I am continuing what you did\n",
      "    1           -0.43483     -0.43483       1.000e+00 \n",
      "    2           -0.46237     -0.46237       9.147e-02 \n",
      "    3           -0.46739     -0.46739       1.733e-02 \n",
      "    4           -0.46823     -0.46823       3.119e-03 \n",
      "    5           -0.46835     -0.46835       5.955e-04 \n",
      "    6           -0.46836     -0.46836       2.080e-04 \n",
      "    7           -0.46835     -0.46835       7.766e-05 \n",
      "    8           -0.46835     -0.46835       3.044e-05 \n",
      "    9           -0.46835     -0.46835       1.223e-05 \n",
      "   10           -0.46835     -0.46835       4.972e-06 \n",
      "   11           -0.46835     -0.46835       2.037e-06 \n",
      "   12           -0.46835     -0.46835       8.390e-07 \n",
      "Done with 2.0\n"
     ]
    }
   ],
   "source": [
    "# dis_eq      = np.linspace(0.5,5,30)\n",
    "# dis_st      = np.linspace(5.1,10,10)\n",
    "# distances   = np.concatenate((dis_eq, dis_st))\n",
    "#distances = [1.0,1.5,2.0,3.0,6.0,10]\n",
    "distances = [2.0]\n",
    "energy    = []\n",
    "\n",
    "Za, Zb = 1,1\n",
    "pol = 2\n",
    "NP, NM = 7, [6,6]\n",
    "loc = np.array(range(-4,5))\n",
    "\n",
    "\n",
    "for d in distances:\n",
    "    a = d/2    \n",
    "    L = np.arccosh(10/a)\n",
    "    grid = Psgrid(NP, NM, a, L, loc)\n",
    "    grid.initialize()\n",
    "\n",
    "    Nmo_a = [[1,0]]; Nmo_A = [[0,1]]  # Alpha fragment\n",
    "    N_a   = [[1,0]]; N_A   = [[0,1]]\n",
    "    nu_a = 0.5\n",
    "\n",
    "    Nmo_b = [[1,0]]; Nmo_B = [[0,1]] # Beta fragment\n",
    "    N_b   = [[1,0]]; N_B   = [[0,1]] \n",
    "    nu_b = 0.5\n",
    "\n",
    "    Nmo_m = [[1,1]] #Molecular elctron configuration\n",
    "    N_m   = [[1,1]]\n",
    "\n",
    "\n",
    "    part = Partition(grid, Za, Zb, pol, [Nmo_a, Nmo_A], [N_a, N_A], nu_a, \n",
    "                                        [Nmo_b, Nmo_B], [N_b, N_B], nu_b, {    \"AB_SYM\"            : True,\n",
    "                                                                                                               \"interaction_type\"  : \"dft\", \n",
    "                                                                                                               \"kinetic_part_type\" : \"libxcke\",\n",
    "                                                                                                               \"hxc_part_type\"     : \"overlap_hxc\",\n",
    "                                                                                                               \"k_family\"          : \"gga\", \n",
    "                                                                                                               \"ke_func_id\"        : 500,\n",
    "                                                                                                                })\n",
    "\n",
    "    #Setup inverter object\n",
    "    mol_solver = Pssolver(grid, Nmo_m, N_m)\n",
    "    part.inverter = Inverter(grid, mol_solver, {  \"AB_SYM\"         : True, \n",
    "                                                  \"use_iterative\"  : False,\n",
    "                                                  \"invert_type\"    : \"wuyang\",\n",
    "                                                  \"disp\"           : False,  \n",
    "                                                })\n",
    "\n",
    "    part.optPartition.isolated = True\n",
    "    part.scf({\"disp\"  : True,\n",
    "              \"alpha\" : [0.6],\n",
    "              \"e_tol\" : 1e-6})\n",
    "\n",
    "    part.optPartition.isolated   = False\n",
    "    part.scf({\"disp\"       : True,\n",
    "              \"alpha\"      : [0.6],\n",
    "              \"max_iter\"   : 20,\n",
    "              \"e_tol\"      : 1e-6,\n",
    "              \"iterative\"  : False,\n",
    "              \"continuing\" : True})\n",
    "    \n",
    "    energy.append(copy(part.E.E))\n",
    "    print(f\"Done with {d}\")\n",
    "    \n",
    "energy    = np.array(energy)\n",
    "# np.save('h2_distance.npy', distances)\n",
    "# np.save('h2_overlap.npy', energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print(mol_solver[0,1].N)\n",
    "print(mol_solver[0,1].N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.2, 0.1)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "h_energy = part.E.Ea\n",
    "plt.scatter(distances, energy - 2 * h_energy)\n",
    "plt.axhline(y=0, alpha=0.5, c=\"grey\", ls=\":\")\n",
    "plt.ylim(-.2,.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.2, 0.1)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "h_energy = part.E.Ea\n",
    "plt.scatter(distances, energy - 2 * h_energy)\n",
    "plt.axhline(y=0, alpha=0.5, c=\"grey\", ls=\":\")\n",
    "plt.ylim(-.2,.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Ea': -0.23844197926790334,\n",
       " 'Eb': -0.23844197926790334,\n",
       " 'Ef': -0.4768839585358067,\n",
       " 'Tsf': 0.4620807664165111,\n",
       " 'Eksf': array([[-0.37083057,  0.        ]]),\n",
       " 'Enucf': -0.9586482079839713,\n",
       " 'Exf': -0.25432479595589,\n",
       " 'Ecf': -0.021606175193767806,\n",
       " 'Ehf': 0.2956144541813114,\n",
       " 'Vhxcf': 0.22731030705386193,\n",
       " 'Ep': -0.10361407413796911,\n",
       " 'Ep_pot': -0.10138801621614,\n",
       " 'Ep_kin': -0.0009445526559095918,\n",
       " 'Ep_hxc': -0.0012815052659195076,\n",
       " 'Et': -0.5804980326737758,\n",
       " 'Vnn': 0.1,\n",
       " 'E': -0.4804980326737758,\n",
       " 'evals_a': array([], dtype=float64),\n",
       " 'evals_b': array([], dtype=float64),\n",
       " 'S': 0.008408703562903047,\n",
       " 'F': 0.018974622994724768,\n",
       " 'Ehcor': 0.0,\n",
       " 'Ep_h': -0.12210437561611617,\n",
       " 'Ep_x': 0.05241116437900334,\n",
       " 'Ep_c': 0.0021553599567060884}"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vars(part.E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Ea': -0.21261475257867704,\n",
       " 'Eb': -0.21261475257867704,\n",
       " 'Ef': -0.4252295051573541,\n",
       " 'Tsf': 0.6419010917350978,\n",
       " 'Eksf': array([[-0.79224759,  0.        ]]),\n",
       " 'Enucf': -1.0955774472171382,\n",
       " 'Exf': -0.30909758371853363,\n",
       " 'Ecf': -0.023736227409023043,\n",
       " 'Ehf': 0.361280661452243,\n",
       " 'Vhxcf': 0.28330684675459084,\n",
       " 'Ep': -0.654010068876065,\n",
       " 'Ep_pot': -0.5689838591336773,\n",
       " 'Ep_kin': -0.07871891905257977,\n",
       " 'Ep_hxc': -0.006307290689807986,\n",
       " 'Et': -1.079239574033419,\n",
       " 'Vnn': 0.5,\n",
       " 'E': -0.5792395740334191,\n",
       " 'evals_a': array([], dtype=float64),\n",
       " 'evals_b': array([], dtype=float64),\n",
       " 'S': 0.3634945898331485,\n",
       " 'F': 0.6961056555557593,\n",
       " 'Ehcor': 0.0,\n",
       " 'Ep_h': -0.03942103341034814,\n",
       " 'Ep_x': 0.029481317179483935,\n",
       " 'Ep_c': 0.000878892432826895}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vars(part.E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'E': -0.4252295051573541,\n",
       " 'Ec': -0.023736227409023043,\n",
       " 'Ex': -0.30909758371853363,\n",
       " 'Eks': array([[-0.79224759,  0.        ]]),\n",
       " 'Vks': array([[-1.43414868,  0.        ]]),\n",
       " 'Ts': 0.6419010917350978,\n",
       " 'evals': array([], dtype=float64),\n",
       " 'Enuc': -1.0955774472171382,\n",
       " 'Vext': -0.6218777797762454,\n",
       " 'Vhxc': 0.28330684675459084,\n",
       " 'Eh': 0.361280661452243,\n",
       " 'Et': -0.4252295051573541,\n",
       " 'Vnn': 0.0,\n",
       " 'Ehcor': 0.0}"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vars(part.KSa.E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
